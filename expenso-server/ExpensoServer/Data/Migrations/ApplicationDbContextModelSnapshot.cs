// <auto-generated />
using System;
using ExpensoServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExpensoServer.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExpensoServer.Data.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.IncomingCategories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IncomingCategories");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.IncomingOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<Guid>("IncomingCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("IncomingCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("IncomingOperations");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.OutgoingCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OutgoingCategories");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.OutgoingOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("OutgoingCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("OutgoingCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("OutgoingOperations");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.TransferOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<Guid>("FromAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ToAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("ToAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("TransferOperations");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PreferredCurrency")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.Account", b =>
                {
                    b.HasOne("ExpensoServer.Data.Entities.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.IncomingCategories", b =>
                {
                    b.HasOne("ExpensoServer.Data.Entities.User", "User")
                        .WithMany("IncomingCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.IncomingOperation", b =>
                {
                    b.HasOne("ExpensoServer.Data.Entities.Account", "Account")
                        .WithMany("IncomingOperations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpensoServer.Data.Entities.IncomingCategories", "IncomingCategories")
                        .WithMany("IncomingOperations")
                        .HasForeignKey("IncomingCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpensoServer.Data.Entities.User", "User")
                        .WithMany("IncomingOperations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("IncomingCategories");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.OutgoingCategory", b =>
                {
                    b.HasOne("ExpensoServer.Data.Entities.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.OutgoingOperation", b =>
                {
                    b.HasOne("ExpensoServer.Data.Entities.Account", "Account")
                        .WithMany("OutgoingOperations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpensoServer.Data.Entities.OutgoingCategory", "OutgoingCategory")
                        .WithMany("OutgoingOperations")
                        .HasForeignKey("OutgoingCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpensoServer.Data.Entities.User", "User")
                        .WithMany("OutgoingOperations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("OutgoingCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.TransferOperation", b =>
                {
                    b.HasOne("ExpensoServer.Data.Entities.Account", "FromAccount")
                        .WithMany("OutgoingTransfers")
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpensoServer.Data.Entities.Account", "ToAccount")
                        .WithMany("IncomingTransfers")
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpensoServer.Data.Entities.User", "User")
                        .WithMany("TransferOperations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.Account", b =>
                {
                    b.Navigation("IncomingOperations");

                    b.Navigation("IncomingTransfers");

                    b.Navigation("OutgoingOperations");

                    b.Navigation("OutgoingTransfers");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.IncomingCategories", b =>
                {
                    b.Navigation("IncomingOperations");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.OutgoingCategory", b =>
                {
                    b.Navigation("OutgoingOperations");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Categories");

                    b.Navigation("IncomingCategories");

                    b.Navigation("IncomingOperations");

                    b.Navigation("OutgoingOperations");

                    b.Navigation("TransferOperations");
                });
#pragma warning restore 612, 618
        }
    }
}
