// <auto-generated />
using System;
using ExpensoServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExpensoServer.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250806182028_AddCurrencyToOperations")]
    partial class AddCurrencyToOperations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExpensoServer.Data.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("181f61df-3da5-4f89-ab05-8b0718d25aa2"),
                            IsDefault = true,
                            Name = "Salary",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("ceca4e62-81f6-4aa7-b37c-9f57b0ef4a71"),
                            IsDefault = true,
                            Name = "Investments",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("ddabd24b-40c3-4a3b-aa9b-3de111054a63"),
                            IsDefault = true,
                            Name = "Other",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("430b7c2c-bdd5-4bee-8609-e08c8f406a39"),
                            IsDefault = true,
                            Name = "Food",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("bc539863-1619-4d83-a168-2b828f694c3e"),
                            IsDefault = true,
                            Name = "Home",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("eb34eabf-891c-4eee-98d2-c64c4315055d"),
                            IsDefault = true,
                            Name = "Other",
                            Type = 1
                        });
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<Guid?>("FromAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ToAccountId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("ToAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.Account", b =>
                {
                    b.HasOne("ExpensoServer.Data.Entities.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.Category", b =>
                {
                    b.HasOne("ExpensoServer.Data.Entities.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.Operation", b =>
                {
                    b.HasOne("ExpensoServer.Data.Entities.Category", "Category")
                        .WithMany("Operations")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ExpensoServer.Data.Entities.Account", "FromAccount")
                        .WithMany("FromOperations")
                        .HasForeignKey("FromAccountId");

                    b.HasOne("ExpensoServer.Data.Entities.Account", "ToAccount")
                        .WithMany("ToOperations")
                        .HasForeignKey("ToAccountId");

                    b.HasOne("ExpensoServer.Data.Entities.User", null)
                        .WithMany("Operations")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.Account", b =>
                {
                    b.Navigation("FromOperations");

                    b.Navigation("ToOperations");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.Category", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("ExpensoServer.Data.Entities.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Categories");

                    b.Navigation("Operations");
                });
#pragma warning restore 612, 618
        }
    }
}
